{"version":3,"sources":["redux/contacts/contacts-actions.js","components/contactForm/ContactFormStyled.js","components/contactForm/ContactForm.js","redux/filter/filter-actions.js","components/filter/Filter.js","components/contactListItem/ContactListItemStyled.js","components/contactListItem/ContactListItem.js","components/contactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/filter/filter-reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["addNewContact","createAction","deleteContact","ContactFormContainer","styled","form","InputContainer","input","LabelContainer","label","ButtonContainer","button","ContactForm","state","name","number","handleChange","event","setState","target","value","handleSubmit","preventDefault","console","log","dir","props","contacts","some","contact","alert","onSubmit","this","htmlFor","type","id","pattern","title","required","onChange","Component","connect","dispatch","mapDispatchToProps","filter","ContactListItemContainer","li","ContactListItem","className","onClick","allContacts","toLowerCase","includes","trim","map","uuid","App","createReducer","payload","rootReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ff713b58.chunk.js","sourcesContent":["import {createAction} from '@reduxjs/toolkit';\n\nexport const addNewContact = createAction('contacts/Add');\n\nexport const deleteContact = createAction('contacts/Delete');\n\n// Решение до Redux Toolkit\n\n// export const addNewContact = payload => ({\n//   type: types.ADD,\n//   payload\n// });\n\n// export const deleteContact = payload => ({\n//   type: types.DELETE,\n//   payload\n// });\n","import styled from 'styled-components';\nexport const ContactFormContainer = styled.form`\n  width: 50vw;\n  padding: 16px;\n  border: 2px solid grey;\n  border-radius: 4px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const InputContainer = styled.input`\n  display: block;\n  min-width: 300px;\n  padding: 5px 10px;\n  margin-bottom: 15px;\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  :focus {\n    outline: none;\n    border: 3px solid lightblue;\n  }\n`;\n\nexport const LabelContainer = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 18px;\n`;\n\nexport const ButtonContainer = styled.button`\n  padding: 2px 10px;\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  background-color: white;\n  font-size: 16px;\n  cursor: pointer;\n  transition-duration: 0.4s;\n  :hover {\n    background-color: lightblue;\n    color: white;\n    border-color: lightblue;\n  }\n`;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {addNewContact} from '../../redux/contacts/contacts-actions';\n\nimport {\n  ButtonContainer,\n  ContactFormContainer,\n  InputContainer,\n  LabelContainer\n} from './ContactFormStyled';\n\nclass ContactForm extends Component {\n  state = {name: '', number: ''};\n\n  handleChange = event => {\n    this.setState({[event.target.name]: event.target.value});\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    console.log('Adding new');\n    console.dir(this.props);\n\n    if (this.props.contacts.some(contact => contact.name === this.state.name)) {\n      alert(`${this.state.name} is already in contacts.`);\n      return;\n    }\n\n    this.props.addNewContact({\n      name: this.state.name,\n      number: this.state.number\n    });\n  };\n\n  render() {\n    return (\n      <ContactFormContainer onSubmit={this.handleSubmit}>\n        <LabelContainer htmlFor=\"name\">Name</LabelContainer>\n        <InputContainer\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={this.handleChange}\n          value={this.state.name}\n        />\n        <LabelContainer htmlFor=\"number\">Number</LabelContainer>\n        <InputContainer\n          type=\"tel\"\n          id=\"number\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={this.handleChange}\n          value={this.state.value}\n        />\n        <ButtonContainer type=\"submit\">Add contact</ButtonContainer>\n      </ContactFormContainer>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addNewContact: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  // console.log('Contacts form - mapstate');\n  // console.dir(state);\n  return {contacts: state.contacts};\n};\n\n// Решение до Redux Toolkit, оставила для сравнения\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewContact: contact => dispatch(addNewContact(contact))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const handleChange = createAction('filter/handleChange');\n\n// export const getFilteredContacts = payload => ({\n//   type: types.GET_FILTERED,\n//   payload\n// });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {InputContainer, LabelContainer} from '../contactForm/ContactFormStyled';\nimport {handleChange} from '../../redux/filter/filter-actions';\n\nconst Filter = ({filter, handleChange}) => {\n  // console.log('Filter-props');\n  // console.dir(filter);\n  return (\n    <>\n      <LabelContainer htmlFor=\"filter\">Find contacts by name</LabelContainer>\n      <InputContainer\n        id=\"filter\"\n        type=\"text\"\n        onChange={event => {\n          // console.log(event.target.value);\n          return handleChange(event.target.value);\n        }}\n        name=\"filter\"\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => {\n  // console.log('Filter-mapStateToProps');\n  // console.dir(state);\n  return {\n    filter: state.filter\n  };\n};\n\nconst mapDispatchToProps = {\n  handleChange\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n// export default Filter;\n","import styled from 'styled-components';\n\nexport const ContactListItemContainer = styled.li`\n  margin-bottom: 10px;\n  .contactListItemText {\n    display: inline-block;\n    margin-right: 10px;\n    font-size: 18px;\n  }\n`;\n","import React from 'react';\nimport {ButtonContainer} from '../contactForm/ContactFormStyled';\nimport {ContactListItemContainer} from './ContactListItemStyled';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({name, number, deleteContact}) => {\n  return (\n    <ContactListItemContainer>\n      <p className=\"contactListItemText\">\n        {name}: {number}\n      </p>\n      <ButtonContainer type=\"button\" onClick={deleteContact}>\n        Delete\n      </ButtonContainer>\n    </ContactListItemContainer>\n  );\n};\n\nContactListItem.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {v4 as uuid} from 'uuid';\nimport ContactListItem from '../contactListItem/ContactListItem';\nimport {connect} from 'react-redux';\nimport {deleteContact} from '../../redux/contacts/contacts-actions';\n\nconst ContactList = ({contacts, deleteContact}) => {\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactListItem\n          name={contact.name}\n          number={contact.number}\n          key={uuid()}\n          deleteContact={() => deleteContact(contact.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired\n    })\n  )\n};\n\nconst getFilteredContacts = (allContacts, filter) => {\n  // console.log('getFilteredContacts');\n  // console.dir(filter);\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n};\nconst mapStateToProps = state => {\n  // console.log('ContactList-mapStateToProps');\n  // console.dir(state.contacts);\n  return {\n    contacts: getFilteredContacts(state.contacts, state.filter)\n  };\n};\n\nconst mapDispatchToProps = {deleteContact};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import {Component} from 'react';\nimport ContactForm from './components/contactForm/ContactForm';\nimport Filter from './components/filter/Filter';\nimport ContactList from './components/contactList/ContactList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {createReducer} from '@reduxjs/toolkit';\nimport {addNewContact, deleteContact} from './contacts-actions';\n\nconst initialState = [\n  {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n  {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n  {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n  {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'}\n];\n\nconst contacts = createReducer(initialState, {\n  [addNewContact]: (state, {payload}) => [...state, payload],\n  [deleteContact]: (state, {payload}) => state.filter(({id}) => id !== payload)\n});\n\n// Решение до Redux Toolkit\n// const contactsReducer = (state = initialState, {type, payload}) => {\n//   console.log({type, payload});\n//   switch (type) {\n// case types.ADD:\n//   return {\n//     ...state,\n//     contacts: [...state.contacts, {id: uuid(), ...payload}]\n//   };\n\n//     case types.DELETE:\n//       return {\n//         ...state,\n//         contacts: state.contacts.filter(contact => contact.id !== payload)\n//       };\n\n//     default:\n//       console.log(state);\n//       return state;\n//   }\n// };\n\nexport default contacts;\n","import {createReducer} from '@reduxjs/toolkit';\nimport {handleChange} from './filter-actions';\n\nconst initialState = '';\nconst filter = createReducer(initialState, {\n  [handleChange]: (state, {payload}) => {\n    return payload;\n  }\n});\n\n// Решение до Redux Toolkit\n\n// const initialState = {\n//   filter: ''\n// };\n\n// const filterReducer = (state = initialState, {type, payload}) => {\n//   switch (type) {\n//     case types.GET_FILTERED:\n//       return {\n//         ...state,\n//         payload\n//       };\n\n//     default:\n//       return state;\n//   }\n// };\n\nexport default filter;\n","import {combineReducers} from 'redux';\nimport contacts from './contacts/contacts-reducer';\nimport filter from './filter/filter-reducer';\n\nconst rootReducer = combineReducers({\n  contacts,\n  filter\n});\n\nexport default rootReducer;\n","import contactsReducer from './rootReducer';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }),\n  logger\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter']\n};\n\nconst store = configureStore({\n  reducer: persistReducer(contactsPersistConfig, contactsReducer),\n  middleware,\n  devTools: process.env.NODE_ENV === 'development'\n});\nconst persistor = persistStore(store);\n\nexport default {store, persistor};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport {PersistGate} from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}